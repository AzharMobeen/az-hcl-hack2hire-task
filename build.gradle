plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.4.0.2513"
}


group = 'ae.hcl.gateway'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    implementation 'org.springdoc:springdoc-openapi-security:1.6.9'
    runtimeOnly 'org.postgresql:postgresql'
    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    implementation group: 'com.auth0', name: 'java-jwt', version: '4.0.0'
    //implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
    reports {
        xml.enabled(true)
    }
}
jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude:  [
                    'ae/hcl/gateway/dto/**',
                    'ae/hcl/gateway/entity/**',
                    'ae/hcl/gateway/exception/**',
                    'ae/hcl/gateway/repository/**',
                    'ae/hcl/gateway/filter/**',
                    '**/ae/hcl/gateway/constant/**',
                    'ae/hcl/gateway/HclGatewayApp.class'
            ])
        }))
    }
}
sonarqube {
    properties {
        property 'sonar.projectName', 'hcl-banking-gateway'
        property 'sonar.projectKey', 'hcl-banking-gateway'
        property 'sonar.host.url', 'http://192.168.1.21:9000'
        property "sonar.exclusions", "**/ae/hcl/gateway/dto/**, **/ae/hcl/gateway/entity/**, **/ae/hcl/gateway/constant/**, 'ae/hcl/gateway/filter/**', **/ae/hcl/gateway/exception/**, **/ae/hcl/gateway/repository/**, **/ae/hcl/gateway/HclGatewayApp.java"
        property "sonar.issue.ignore.multicriteria", "e1"
        property "sonar.issue.ignore.multicriteria.e1.resourceKey", "src/test/java/**/*"
        property "sonar.issue.ignore.multicriteria.e1.ruleKey", "*"
    }
}

tasks.named('sonarqube').configure {
    dependsOn test
}

sourceSets {
    main {
        java {
            srcDirs "src/main/java"
        }
    }

    test {
        java {
            srcDirs "src/test/java"
        }
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}